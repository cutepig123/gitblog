<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/cutepig123/gitblog</id><title>RSS feed of cutepig123's gitblog</title><updated>2023-07-02T03:01:10.795915+00:00</updated><author><name>cutepig123</name><email>jinshouhe@gmail.com</email></author><link href="https://github.com/cutepig123/gitblog"/><link href="https://raw.githubusercontent.com/cutepig123/gitblog/master/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><entry><id>https://github.com/cutepig123/gitblog/issues/36</id><title>shadowsocks</title><updated>2023-07-02T03:01:11.072599+00:00</updated><content type="html"><![CDATA[<pre><code>
 2332  cargo install shadowsocks-rust
 2333  wget https://github.com/shadowsocks/shadowsocks-rust/releases/download/v1.15.3/shadowsocks-v1.15.3.x86_64-unknown-linux-gnu.tar.xz
 2334  ls shadowsocks-v1.15.3.x86_64-unknown-linux-gnu.tar.xz
 2335  tar xvzf  shadowsocks-v1.15.3.x86_64-unknown-linux-gnu.tar.xz
 2336  tar -xf  shadowsocks-v1.15.3.x86_64-unknown-linux-gnu.tar.xz
 2337  ls
 2338  ls sha*
 2339  tar -xf  shadowsocks-v1.15.3.x86_64-unknown-linux-gnu.tar.xz
 2340  ./sslocal
 2341  ./ssservice
 2342  ./ssservice server
 2343  nano ssocks.cfg
 2344  nano ssocks.json
 2345  ./ssservice server -c ssocks.json
 2346  ./sserver -c ssocks.json
 2347  ./ssserver -c ssocks.json
 2348  nano ssocks.json
 2349  ./ssserver -c ssocks.json
 2350  ./ssservice server -c ssocks.json
➜  ~ ls ss*
sslocal  ssmanager  ssocks.json  ssserver  ssservice  ssurl
➜  ~ cat ssocks.json
{
    &quot;server&quot;:&quot;0.0.0.0&quot;,
    &quot;server_port&quot;:8388,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;barfoo!&quot;,
    &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;
}

</code></pre>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/36" rel="alternate"/><published>2023-07-02T03:00:41+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/35</id><title>居住证</title><updated>2023-07-02T03:01:11.161324+00:00</updated><content type="html"><![CDATA[<p>港澳居住证需要什么材料。只需要回乡证，结婚证，房产证，照片即可</p>
<p>地点在哪。上沙地铁站附近那个很方便，出地铁五十米</p>
<p>注意事项。
今天不熟悉搞了好多麻烦，去错地方折腾了半天，好几个地方都叫福田大厅。
拍照片又搞错了，要港澳台居住证不是内地的居住证照片，
复印结婚证要全部三页复印而不是中间那一页</p>
<p>如何领取。
两周办好，可以邮寄，他们给张纸，交给邮递员</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/35" rel="alternate"/><published>2023-06-30T04:51:50+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/34</id><title>年度计划</title><updated>2023-07-02T03:01:11.266130+00:00</updated><content type="html"><![CDATA[<p>语言，
加强英语听力，不要听了半天不明白，目标是1.听懂名人演讲，比如奥巴马，nvidia台大 2.听懂技术类访谈节目</p>
<p>粤语口语，目标是自己讲的别人能一次听懂。避免1别人要问多几次才明白 2别人立马转普通话</p>
<p>工作。如何才能升职？如何找到突破点？如果从项目出发，有什么值得做，有机会升职的项目？</p>
<p>个人项目
。短期内是把自己想做的几个项目做起来，gui不重要
1 incredibuild
价值，真的做成了很有价值，说不定能卖钱
难度，该项目有点黑客性质，如果在预期之内，那么不难。关键在于poc
系统设计，
时间规划，
2 speak app 复读跟读判断 app，使用ai
价值: 能卖钱。对己对人都有用
难度 : 涉及到好几部分，每部分都要分别poc，安卓音频分析，语音频谱分析，ai语音识别，ai语音打分
系统设计
时间规划</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/34" rel="alternate"/><published>2023-06-25T04:51:58+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/33</id><title>感兴趣的书</title><updated>2023-07-02T03:01:11.358904+00:00</updated><content type="html"><![CDATA[<p>感兴趣的书</p>
<p>目的。。学习的重点在于灵活运用，之前大学上课就是听听而已，理解都不算深入，更别说实践，运用，甚至灵活运用了。现在是想重新拿起来，思考能否把他们用到实际中</p>
<p>《傅里叶光学导论 第四版》
《傅里叶光学导论（第四版）》讨论傅里叶分析在光学领域中的应用，尤其是在衍射、成像、光学数据处理以及全息术方面的应用。内容涉及二维信号和系统的分析、标量衍射理论基础、菲涅耳衍射与夫琅禾费衍射、计算衍射和计算传播、相干光学系统的波动光学分析、光学成像系统的频谱分析、点扩展函数和传递函数的工程、波前调制、模拟光学信息处理、全息术、光通信中的傅里叶光学等。</p>
<p>结构光测量相关。暂无好书
結構光三維成像及其編碼技術 - 台灣儀器科技研究中心</p>
<p>现代数字全息导论
BooksToggle Sub Navigation
Introduction to Modern Digital Holography with MATLAB
Written for graduate students and professionals, Introduction to Modern Digital Holography with MATLAB presents modern techniques and conventions for digital holography. Building up from the basic principles of optics, this book describes key techniques in digital holography, such as phase-shifting holography, low-coherence holography, diffraction tomographic holography and optical scanning holography, discussing their practical applications, and accompanied by all the theory necessary to understand the underlying principles at work.</p>
<p>matlab是一个强大的工具，暂无好书</p>
<p>控制理论及系统辨识
📚 系统辨识及其MATLAB仿真+侯媛彬+汪梅等.PDF
系统辨识及其MATLAB仿真+侯媛彬+汪梅等.pdf
《普通高等教育&quot;十二五&quot;规划教材•电气工程、自动化专业规划教材:系统辨识理论及MATLAB仿真》共9章，包括绪论、系统辨识常用输入信号、最小二乘参数辨识方法及原理、极大似然参数辨识方法及其应用、传递函数的时域和频域辨识、神经网络辨识及其应用、模糊系统辨识、智能优化算法辨识及灰色系统辨识。书中有大量实例，每种实例都进行了仿真分析，并给出了相应的MATLAB仿真程序。《普通高等教育&quot;十二五&quot;规划教材•电气工程、自动化专业规划教材:系统辨识理论及MATLAB仿真》各部分内容既相互联系又相互独立，读者可根据自己需要选择学习</p>
<p>📚 过程控制的多变量系统辨识
（荷兰）朱豫才著  张湘平  虞水俊  孙志强  胡德文译
🌐 Chinese
本书是2001年由Pergamon出版，总结了作者在系统辨识领域的研究、开发及应用的成果，表达了他对辨识学科的看法。其中的渐近法（ASYM）被首次用于SetPoint公司的MPC项目中。该书倾向于应用，目的在于为理论和应用之间架起一座桥梁，为实际应用提供具有坚实科学理论基础的过程辨识方法。</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/33" rel="alternate"/><published>2023-06-25T02:36:23+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/32</id><title>自动控制理论</title><updated>2023-07-02T03:01:11.445274+00:00</updated><content type="html"><![CDATA[<p>自动控制理论</p>
<h1>本文目的</h1>
<ul>
<li>本人虽然是自控专业，但学的时候纯粹是书本知识，现在全部忘光了。当时也没有实践，完全没有切身感受。</li>
<li>现在想系统的梳理一下这门课的现实意义，（比如能不能用在我们现在的调节灯光和曝光时间，优化图像效果上）</li>
<li>大概看了看，他们很多都是先有模型。如果模型未知（模型本身未知-可能只能给个大概的近似模型，或者模型参数未知），那么咋办呢</li>
<li>不同类型的系统（伺服马达控制，温度控制，过程控制，模型未知系统），控制策略上有啥不同</li>
<li>其实控制理论只是整个系统的一部分（有时候是很小一部分，比如自动驾驶系统中传感器-无论是视觉+AI算法，还是超声波雷达-反而是大多部分）。自动化本质上是一门交叉学科</li>
<li>能否有些实际的案例，最好有代码，仿真或者实验数据来作为佐证</li>
</ul>
<h1>Use case</h1>
<h1>自动控制理论</h1>
<p>经典控制理论、现代控制理论、智能控制（后者包含前者）</p>
<h2>经典控制理论</h2>
<ul>
<li>方法:以传递函数为基础的频域法（线性）</li>
<li>对象:单输入-单输出一类定常控制系统的分析与设计问题</li>
<li>手段:图解</li>
<li>特点:定性分析,这些理论由于其发展较早，现已日臻成熟（主要特点：用图形的方法定性分析闭环系统的稳定性及性能）</li>
<li>目标：稳定和达到一定的性能</li>
</ul>
<h2>PID控制</h2>
<p>在控制领域，1942年，齐格勒和尼科尔斯提出了整定PID控制器参数的<strong>齐格勒-尼科尔斯方法</strong>，进一步夯实了PID控制的应用基础。维纳于1947年提出的<strong>控制论</strong>与贝塔朗菲于1945年提出的<strong>系统论</strong>，和香农于1948年提出的<strong>信息论</strong>并称为“三论”。</p>
<p>作者：TonnyYan
链接：<a href="https://www.jianshu.com/p/597eba8c56d3">https://www.jianshu.com/p/597eba8c56d3</a>
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2>卡尔曼滤波</h2>
<p>图说卡尔曼滤波，一份通俗易懂的教程 <a href="https://zhuanlan.zhihu.com/p/39912633">https://zhuanlan.zhihu.com/p/39912633</a></p>
<p>wiki <a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2">https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/36745755">https://zhuanlan.zhihu.com/p/36745755</a> 卡尔曼滤波：从入门到精通</p>
<h2>现代控制理论</h2>
<ul>
<li>方法:状态空间法为基础 ,最优化方法,卡尔曼滤波,动态规划,本质是时域法（线性、非线性）</li>
<li>对象:研究多输入-多输出、时变、非线性一类控制系统的分析与设计问题（时变、非线性——人工智能）</li>
<li>手段:计算机,现代数学</li>
<li>特点:定量分析,系统具有高精度和高效能的特点</li>
<li>目标：性能最优</li>
</ul>
<p>除了提出卡尔曼滤波外，卡尔曼还首先引入<strong>状态空间法</strong>描述系统，将高阶系统表示为线性微分方程组的向量-矩阵形式，进而提出了<strong>能控性、能观性、标准分解</strong>等一系列基本概念、模型与方法，几乎以一己之力形塑了<strong>线性系统理论框架</strong>。</p>
<p><strong>从线性系统理论的观点看，经典控制理论中的传递函数只描述了系统的能控能观部分。<strong>此外，基于时域的、以向量-矩阵形式描述的状态空间表示，不仅在形式上更为自然，而且也更容易在计算机上编程实现。而</strong>状态反馈、极点配置、状态观测器</strong>等方法的提出，又使得线性系统理论能够完整地指导实际控制系统的设计与校正，而且成为将成果普遍化到非线性系统上的标准典范和对所有新的控制规范的基础，并与<strong>最优控制</strong>一道开创了<strong>现代控制理论。</strong></p>
<p>作者：TonnyYan
链接：<a href="https://www.jianshu.com/p/597eba8c56d3">https://www.jianshu.com/p/597eba8c56d3</a>
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2>最优控制</h2>
<h2>线性系统的数学模型</h2>
<p>典型表达方式：微分方程、传递函数、状态方程、频率特性</p>
<p>瞬态过程 稳态响应 拉普拉斯变换 间响应 时域分析</p>
<p>赫尔维兹判据  劳斯判据</p>
<p>单位阶跃输入</p>
<p><strong>动态性能指标</strong>：延迟时间、上升时间、峰值时间、调节时间、超调（振荡衰减型，单调变化型）</p>
<p>线性系统的根轨迹法 系统的零、极点分布图， 系统的闭环特征 </p>
<p>线性系统的频域分析法 </p>
<p>相平面法——简单的状态空间分析法</p>
<p>描述函数法——近似处理方法</p>
<h2>其他</h2>
<p>20世纪70年代至今，控制领域又不断涌现出了新的成果，<strong>非线性控制、鲁棒控制、自适应控制、随机控制</strong>等理论与方法竞相争妍。随着计算机科学的发展，尤其是<strong>人工智能</strong>的发展和计算机硬件的革新换代，<strong>控制理论和计算机科学的联系越来越密切</strong>。人工智能中的<strong>深度神经网络和凸优化</strong>等方法在控制领域得到广泛运用，而结合计算机视觉理论对机器人进行控制，又是控制理论与实际结合的一个显例。</p>
<p>作者：TonnyYan
链接：<a href="https://www.jianshu.com/p/597eba8c56d3">https://www.jianshu.com/p/597eba8c56d3</a>
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h1>Ref</h1>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/104218638">https://zhuanlan.zhihu.com/p/104218638</a></p>
</li>
<li>
<p>作者：司马睿r <a href="https://www.bilibili.com/read/cv1294615/">https://www.bilibili.com/read/cv1294615/</a> 出处：bilibili</p>
</li>
<li>
<p><a href="https://www.bilibili.com/read/cv1294615/">https://www.bilibili.com/read/cv1294615/</a> 深入浅出自动控制</p>
</li>
<li>
<p><a href="https://www.yiboard.com/thread-894-1-1.html">https://www.yiboard.com/thread-894-1-1.html</a> PID参数调节</p>
</li>
<li>
<p><a href="https://www.jianshu.com/p/597eba8c56d3">https://www.jianshu.com/p/597eba8c56d3</a> 自动控制历史</p>
</li>
<li>
<p><a href="https://www.cnblogs.com/z-sm/p/11910825.html">https://www.cnblogs.com/z-sm/p/11910825.html</a> [<a href="https://www.cnblogs.com/z-sm/p/11910825.html">自动控制的故事 </a>](https://www.cnblogs.com/z-sm/p/11910825.html) <a href="https://zhuanlan.zhihu.com/p/65339164">https://zhuanlan.zhihu.com/p/65339164</a></p>
</li>
<li>
<p><a href="https://zh.wikipedia.org/zh-hans/%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA">https://zh.wikipedia.org/zh-hans/%E6%8E%A7%E5%88%B6%E7%90%86%E8%AE%BA</a> wiki</p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/42615269">https://zhuanlan.zhihu.com/p/42615269</a> 如何入门自动控制理论</p>
<ul>
<li>
<pre><code class="language-text">一、一个典型的系统响应有什么特点
二、幅频响应和相频响应
三、传递函数的零、极点是怎么个回事
四、什么是闭环控制系统
</code></pre>
</li>
</ul>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/28108498">https://zhuanlan.zhihu.com/p/28108498</a> 《强化学习》第五讲 不基于模型的控制</p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/57504647">https://zhuanlan.zhihu.com/p/57504647</a> 线性SISO 状态空间模型和ARX模型辨识方法对比</p>
</li>
<li>
<p><a href="https://blog.csdn.net/handsome_for_kill/article/details/103112509">https://blog.csdn.net/handsome_for_kill/article/details/103112509</a> MATLAB：对于状态空间方程的系统辨识</p>
</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/32" rel="alternate"/><published>2023-06-22T16:38:36+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/31</id><title>深圳游玩</title><updated>2023-07-02T03:01:11.560542+00:00</updated><content type="html"><![CDATA[<p>深圳游玩</p>
<h1>适合夏天玩，儿童，室内</h1>
<h2>The Wooderful Land 木育森林</h2>
<p><a href="https://www.mamibuy.com.hk/talk/article/70649">https://www.mamibuy.com.hk/talk/article/70649</a></p>
<p><img src="https://1.bp.blogspot.com/-3ma5sawBGOA/W8hQY-HufDI/AAAAAAAAY18/za78T5suL7Egi9Iyw5hnJ5EvNLm3aXEdgCKgBGAs/s1600/IMG_6948.HEIC" alt="https://1.bp.blogspot.com/-3ma5sawBGOA/W8hQY-HufDI/AAAAAAAAY18/za78T5suL7Egi9Iyw5hnJ5EvNLm3aXEdgCKgBGAs/s1600/IMG_6948.HEIC" /></p>
<p>【收費方式】</p>
<p>這次是平日到訪，一家三人$RMB200 ，可以玩2個小時。</p>
<p>(跟一般遊戲室一樣，需要著襪入場，帶上手環以示分別)</p>
<p>**Wooderful Land @**海上世界商場資訊</p>
<p>地址：深圳市南山區海上世界環船廣場C區第1層的第106-109商鋪 </p>
<p>（地鐵2號線海上世界站）</p>
<p>營業時間：週日週四 10:00 <del> 22:00 / 週五週六 10:00 </del> 22:30</p>
<p>Wooderful life海上世界門市</p>
<p>廣東省深圳市南山區蛇口街道海上世界環船廣場BC 區第1 層的C106-109 商鋪</p>
<p>0755-21611053</p>
<p>DIY手作、木育森林</p>
<p>重點設施：空中飛人、搖擺平衡木、保齡球、跳舞飛天豬</p>
<p>​                                                Sun.                                                至                                                Thu.                                                10:00 ~ 22:00                                            </p>
<p>​                                                Fri.                                                至                                                Sat.                                                10:00 ~ 22:30                                            </p>
<p>Wooderful life 益田假日廣場門市</p>
<p>深圳市南山區深南大道9028號益田假日廣場L2-1號商鋪</p>
<p>0755-25114048</p>
<p>DIY手作、木育森林</p>
<p>重點設施：歡樂五人鞦韆、飛機鞦韆</p>
<p>​                                                Sun.                                                至                                                Thu.                                                10:00 ~ 22:00                                            </p>
<p>​                                                Fri.                                                至                                                Sat.                                                10:00 ~ 22:30                                            </p>
<h2>欢乐海岸海洋奇梦馆</h2>
<p>海洋奇梦馆：位于欢乐海岸购物中心二楼西侧,占地3300平方米,是一座集科普教育、体验互动、欣赏娱乐为一体的现代都市型水族馆。</p>
<p><a href="https://gs.ctrip.com/html5/you/sight/shenzhen26/142067.html">https://gs.ctrip.com/html5/you/sight/shenzhen26/142067.html</a></p>
<h2>米兜欢乐王国</h2>
<p>米兜欢乐王国：是目前深圳独一无二的超大型儿童亲子游乐园，汇集了上百个国内外最新最受欢迎的游乐项目，注重亲子互动，健康益智，大人小孩都能够玩得开心！乐园主要针对2-12岁小伙伴，馆内有2,000多平方米营业面积。主要分为四大主题：儿童机动游戏、儿童竞技游戏、儿童娱乐（包括5D互动电影及儿童泡泡party房）、亲子乐园。</p>
<p>十四、华强北博物馆</p>
<p>华强北博物馆是以讲述华强北创业者故事，呈现华强北商圈发展历程，体现华强北不息的人文精神，展现深圳改革开放成就精华为核心主脉的博物馆。华强北博物馆通过多元的呈现方式，融入科技、时尚、艺术等综合元素，使之成为一座解码时代创新精神、传递科技前沿信息、引领时尚艺术潮流的独具特色的博物馆。</p>
<p>十五、蛇口海洋博物馆</p>
<p>博物馆展厅面积800平方米，馆藏实物标本种类约270种，共计上千件展品。博物馆分四个主题，即海洋生态与贝类海洋生物、贝类海洋生物进化及应用、海洋生态文明保护与建设、海洋生态与鱼类。在整个展厅，通过声、光、电、VR演示等现代化技术手段，再现了海洋生物的奇妙世界。</p>
<p>十八、贝尔自然探索中心</p>
<p>贝尔自然探索中心是一家集游乐、观赏、科研、教育社交等多功能于一体，以自然为主题，陈列展览海洋鱼类、藻类、两栖类动植物、陆地鸟类、爬行类动物为主，依托自然文旅产业进行纵深发展，将奇妙博物馆、萌宠剧场、自然课堂、儿童乐园、文创艺术等功巧妙结合形成科学的自然探索世界。</p>
<p>二十、阿尔卑斯冰雪世</p>
<p>世界之窗阿尔卑斯冰雪世界是一座规模颇大的室内冰雪乐园，这里有晶莹剔透的童话城堡，梦幻般的冰雪奇境，可以赏冰雕、看冰舞、享滑雪，尽情体验冰雪狂欢的乐趣。</p>
<p>冰雪世界主要分三大部分，冰雕区、溜冰区、滑雪区。冰雕区五彩斑斓，一座座透明冰雕在景观灯的照耀下绚丽夺目；溜冰场犹如天然的冰湖，游客可尽情开展冰上舞蹈、花样滑冰等运动；在滑雪区可尽情速度与激情的乐趣。</p>
<h1>Ref</h1>
<ul>
<li><a href="https://2shousc.com/post/1012.html">https://2shousc.com/post/1012.html</a></li>
<li>
</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/31" rel="alternate"/><published>2023-06-09T07:07:32+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/30</id><title>Win PE， Live CD总结</title><updated>2023-07-02T03:01:11.665915+00:00</updated><content type="html"><![CDATA[<pre><code class="language-bash">C:\Users\cutepig&gt;tree /f h:
H:\
│   WePE64_V2.2.iso
│   WePE64_V2.2.iso.txt
│   -net-KNOPPIX_V7.2.0CD-2013-06-16-EN.iso	# Linux，支持网络，不错不错
│   My10PEx64.wim
│   USBOSV3.iso
│   -net-CMDPE-3.4.ISO	# Win10，支持网络
│   -fail-My03PE.wim
│   NT52PE.WIM
│   NT63PEX86.WIM
│   NT10PEX64.WIM
│
└───ventoy
        ventoy_wimboot.img	# 让ventoy支持的wim插件
</code></pre>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/30" rel="alternate"/><published>2023-06-09T06:38:07+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/29</id><title>网络小说 馆人</title><updated>2023-07-02T03:01:11.760018+00:00</updated><content type="html"><![CDATA[<p><a href="https://m.ddxs.com/guanren/">https://m.ddxs.com/guanren/</a></p>
<p>一周时间读完了这个小说，小说讲的是一个小人物一步一步走上人生巅峰，迎娶白富美的历程
主人公的成功，离不开一下几方面
个人的天赋
天时地利，运气好
出生条件好，摊上个小土豪的爹妈
利用各种资源，某些资源可能对自己有损害，但是用好了反而是有益
自己的努力，其实看来，这个反而是小方面了</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/29" rel="alternate"/><published>2023-06-07T01:30:28+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/28</id><title>C语言 宏嵌套的展开规则 2 年前</title><updated>2023-07-02T03:01:11.851138+00:00</updated><content type="html"><![CDATA[<p>之前一直搞不明白宏为什么有的时候能递归，有的时候不能。
看boost pp的宏定义不懂为啥搞两层
看了这个帖子才明白</p>
<p><a href="https://zhuanlan.zhihu.com/p/344240420?utm_id=0">https://zhuanlan.zhihu.com/p/344240420?utm_id=0</a></p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/28" rel="alternate"/><published>2023-05-26T06:03:38+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/27</id><title>sockscap代理不支持代理的软件</title><updated>2023-07-02T03:01:11.947696+00:00</updated><content type="html"><![CDATA[<p>要求
windoes平台
原先我有一些程序，但是他们不支持代理。如何让他们也能用？
这个代理工具最好支持多个代理，首先通过p单的，然后再经过一个专有代理，比如shadowsocks实现加密</p>
<p>找到的工具
proxifier 缺点是收费</p>
<p>sockscap64 缺点是不能链式代理</p>
<p>proxycap 缺点是需要重啟電腦，估计他主要管理员权限</p>
<p>freecap 测试没成功</p>
<p>使用这类软件不能连接localhost，我怀疑localhost之类的不会经过dns解析，所以他的远程解析失效了？</p>
<p>todo</p>
<ul>
<li><input disabled="" type="checkbox"> 做一个基于detours的类似于sockscap工具，感觉只需要hook connect就行了</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/27" rel="alternate"/><category term="TODO"/><published>2023-05-26T05:38:34+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/26</id><title>将任意程序变为windows service</title><updated>2023-07-02T03:01:12.043379+00:00</updated><content type="html"><![CDATA[<p><a href="https://www.wintips.org/how-to-run-an-application-as-service/">https://www.wintips.org/how-to-run-an-application-as-service/</a></p>
<p>nssm。用过，很好用</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/26" rel="alternate"/><published>2023-05-25T17:12:26+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/25</id><title>文件上传下载</title><updated>2023-07-02T03:01:12.128506+00:00</updated><content type="html"><![CDATA[<p>文件上传下载</p>
<p>要求</p>
<ul>
<li>只用一个端口，方便端口映射或者socks代理</li>
<li>速度尽可能快</li>
<li>程序文件尽可能小</li>
</ul>
<p>Proposal1:</p>
<ul>
<li>server: python uploadserver</li>
<li>client: python requests</li>
</ul>
<pre><code class="language-python">import requests

# warp-upload-download-example
def fail1():
    url=&#x27;http://localhost:8080/upload&#x27;
    files = {&#x27;file&#x27;: open(&#x27;readme.md&#x27;, &#x27;rb&#x27;)}
    r = requests.post(url, files=files)
    print (r)

# rest-api.exe
# https://github.com/mehrdadep/rust-rest-example/tree/master
def succeed3():
    url=&#x27;http://localhost:9000/api/files/&#x27;
    files = {&#x27;file&#x27;: open(&#x27;readme.md&#x27;, &#x27;rb&#x27;)}
    r = requests.post(url, files=files)
    print (r)

# python -m uploadserver
def succeed4():
    url=&#x27;http://localhost:8000/upload&#x27;
    files = {&#x27;files&#x27;: open(&#x27;readme.md&#x27;, &#x27;rb&#x27;)}
    r = requests.post(url, files=files)
    print (r)

fail3()


</code></pre>
<p>Proposal2</p>
<ul>
<li>server：Rust rust-rest-example (需要加一点修改实现浏览文件)</li>
<li>client: 同上</li>
</ul>
<p>Proposal3:</p>
<ul>
<li>server: filezilla</li>
<li>client: filezilla</li>
<li>标准ftp，不能只用一个端口。但是支持用socks代理中转（不知道具体原理）</li>
</ul>
<p>proposal3 一个rust程序</p>
<p><a href="https://github.com/sigoden/dufs">https://github.com/sigoden/dufs</a></p>
<p><a href="https://lib.rs/crates/simple-http-server">https://lib.rs/crates/simple-http-server</a></p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/25" rel="alternate"/><published>2023-05-22T15:26:57+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/24</id><title>端口转发工具</title><updated>2023-07-02T03:01:12.233641+00:00</updated><content type="html"><![CDATA[<p>端口转发工具</p>
<p>要求</p>
<ul>
<li>
根据客户端协议类型，动态转发到不同地址<ul>
<li>rdp</li>
<li>socks</li>
<li>可配置</li>
</ul>
</li>
<li>高性能</li>
<li>尽可能小</li>
</ul>
<p>我的用法</p>
<ul>
<li>服务端只能被访问某一端口，假设为ports</li>
<li>
但我需要对服务端做一下事情<ul>
<li>远程调试</li>
<li>vnc</li>
<li>双向拷贝资料，ssh？http??</li>
</ul>
</li>
</ul>
<p>设置流程</p>
<ul>
<li>
服务端，假设ip为ips，端口为ports<ul>
<li>打开端口转发工具xxx？</li>
<li>[for 远程调试] 打开vs remote debug sever，关闭认证</li>
<li>[for vnc] 打开 vnc server</li>
<li>[for vnc] 打开 jsocks, or ??</li>
<li>[for copy data] ??</li>
</ul>
</li>
<li>
客户端<ul>
<li>[for 远程调试] 打开 vs，设置debug的地址为ips:ports</li>
<li>[for vnc] 打开vnc，设置代理</li>
</ul>
</li>
</ul>
<p>Ref</p>
<ul>
<li>
端口转发工具<ul>
<li><del><a href="https://github.com/cedar12/east">https://github.com/cedar12/east</a> 这个工具需要专门的客户端</del></li>
<li><a href="https://github.com/geovex/dumb_proxy">https://github.com/geovex/dumb_proxy</a> 需要修改</li>
<li><a href="https://github.com/cfal/tobaru">https://github.com/cfal/tobaru</a> 需要修改</li>
<li><a href="https://github.com/pzmarzly/portforwarder-rs">https://github.com/pzmarzly/portforwarder-rs</a> 需要修改</li>
<li><a href="https://github.com/rousan/maui#windows">https://github.com/rousan/maui#windows</a> 没搞懂用法</li>
<li>其他：<a href="https://github.com/topics/port-forwarding?l=rust">https://github.com/topics/port-forwarding?l=rust</a></li>
<li><del><a href="https://github.com/wlh320/portguard/blob/master/README_zh.md">https://github.com/wlh320/portguard/blob/master/README_zh.md</a> 这个工具需要专门的客户端</del></li>
</ul>
</li>
<li>
socks Server<ul>
<li><a href="https://github.com/geovex/dumb_proxy">https://github.com/geovex/dumb_proxy</a></li>
<li>jsocks</li>
<li><a href="https://github.com/ajmwagar/merino">https://github.com/ajmwagar/merino</a></li>
<li><a href="https://github.com/dizda/fast-socks5">https://github.com/dizda/fast-socks5</a></li>
<li><a href="https://github.com/EAimTY/socks5-server">https://github.com/EAimTY/socks5-server</a></li>
<li><a href="https://github.com/alexkirsz/socksv5">https://github.com/alexkirsz/socksv5</a></li>
<li><a href="https://github.com/sticnarf/tokio-socks">https://github.com/sticnarf/tokio-socks</a></li>
</ul>
</li>
</ul>
<p>文章</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1484318">https://cloud.tencent.com/developer/article/1484318</a>  是的，我又用rust实现了一版socks5代理</li>
<li><a href="https://jimages.net/archives/269">https://jimages.net/archives/269</a> 使用rust实现一个sock5代理</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/24" rel="alternate"/><published>2023-05-17T14:56:30+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/23</id><title>使用facebook nllb英文翻译中文</title><updated>2023-07-02T03:01:12.348793+00:00</updated><content type="html"><![CDATA[<p>测了一下。效果一般般。感觉比google翻译差</p>
<pre><code class="language-python">
# https://huggingface.co/spaces/Geonmo/nllb-translation-demo
import requests
import time

def PostData(url, json_data):
    resp = requests.post(url,json=json_data)
    resp_json = resp.json()
    return resp_json

text = &#x27;&#x27;&#x27;


By default, OpenTracing doesn&#x27;t log automatically into span logs, only important messages that Jaeger feels it needs to be logged and is needed for tracing would be there :). The idea is to separate responsibilities between Tracing and Log management, Check this GitHub discussion.

An alternative would be to use centralized log management and print traceId &amp; spanId into your logs for troubleshooting and correlating logs and tracing.

&#x27;&#x27;&#x27;
request_json = {&quot;fn_index&quot;:0,&quot;data&quot;:[&quot;English&quot;,&quot;Chinese (Simplified)&quot;,text],&quot;action&quot;:&quot;predict&quot;,&quot;session_hash&quot;:&quot;un6x6o8iojq&quot;}
resp = requests.post(&#x27;https://geonmo-nllb-translation-demo.hf.space/api/queue/push/&#x27;,json=request_json)
resp_json = resp.json()
hash = resp_json[&#x27;hash&#x27;]
print(resp_json)

while True:
    url = &#x27;https://geonmo-nllb-translation-demo.hf.space/api/queue/status/&#x27;
    request_json = {&quot;hash&quot;:hash}
    resp_json = requests.post(url,json=request_json).json()
    # {&quot;status&quot;:&quot;COMPLETE&quot;,&quot;data&quot;:{&quot;data&quot;:[{&quot;inference_time&quot;:0.7774190902709961,&quot;source&quot;:&quot;eng_Latn&quot;,&quot;target&quot;:&quot;zho_Hans&quot;,&quot;result&quot;:&quot;你好世界&quot;}],&quot;duration&quot;:0.7777302265167236,&quot;average_duration&quot;:3.264024568158527}}
    print (resp_json)
    if resp_json[&#x27;status&#x27;]==&#x27;COMPLETE&#x27;:
        break
    time.sleep(1)

</code></pre>
<p>Output</p>
<pre><code>PS C:\JS\Desktop&gt; &amp; c:/Users/aeejshe/AppData/Local/anaconda3/python.exe c:/JS/Desktop/test_nllb.py
{&#x27;hash&#x27;: &#x27;16908fcfa6dc496d8de8bcfbef8e0fba&#x27;, &#x27;queue_position&#x27;: 0}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;PENDING&#x27;, &#x27;data&#x27;: None}
{&#x27;status&#x27;: &#x27;COMPLETE&#x27;, &#x27;data&#x27;: {&#x27;data&#x27;: [{&#x27;inference_time&#x27;: 21.45255422592163, &#x27;source&#x27;: &#x27;eng_Latn&#x27;, &#x27;target&#x27;: &#x27;zho_Hans&#x27;, &#x27;result&#x27;: &#x27;默认情况下,OpenTracing不会自动 
登录到跨度日志中,只有Jaeger认为需要登录的重要消息,并且需要追踪的信息将会存在:). 想法是分开追踪和日志管理之间的责任,查看这篇GitHub讨论. 另一个选择是使用集中记录管理, 
并在您的日志中打印traceId &amp; spanId来解决故障,并对相关日志和追踪. &#x27;}], &#x27;duration&#x27;: 21.45286989212036, &#x27;average_duration&#x27;: 3.95068706035614}}
PS C:\JS\Desktop&gt; ^N
</code></pre>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/23" rel="alternate"/><published>2023-04-30T16:12:11+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/22</id><title>ChatGPT推荐图书</title><updated>2023-07-02T03:01:12.441886+00:00</updated><content type="html"><![CDATA[<h3>推荐几本出名的python入门教程</h3>
<pre><code>《Python编程从入门到实践》（Eric Matthes）
《Python基础教程》（Magnus Lie Hetland）
《Python核心编程》（Wesley Chun）
《Python学习手册》（Mark Lutz）
《Python编程快速上手》（Mark Summerfield）
</code></pre>
<h3>推荐几本出名的深度学习入门教程</h3>
<p>以下是几本出名的深度学习入门教程：</p>
<pre><code>&quot;Deep Learning&quot; by Ian Goodfellow, Yoshua Bengio, and Aaron Courville
&quot;Neural Networks and Deep Learning&quot; by Michael Nielsen
&quot;Practical Deep Learning for Coders&quot; by Jeremy Howard and Sylvain Gugger
&quot;Python Machine Learning&quot; by Sebastian Raschka and Vahid Mirjalili
&quot; Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow&quot; by Aurélien Géron
</code></pre>
<p>这些教程都是非常适合初学者的，它们既简洁易懂，又涵盖了深度学习的很多基础知识和实践技巧。无论你是打算进入深度学习领域，还是已经开始学习，这些教程都值得一看。</p>
<h3>推荐几本出名的软件设计，软件架构学习入门教程</h3>
<pre><code>《软件架构设计的艺术》，作者：Martin Fowler
《软件系统设计与模式》，作者：Douglas C. Schmidt
《软件架构涉及》，作者：Len Bass、Paul Clements、Rick Kazman
《程序员必修的软件系统架构设计》，作者：林锐、王莉
《软件架构实践》，作者：Paul Clements、Rick Kazman
《软件架构师手册》，作者：Peter Eeles、Peter Cripps、Oliver Sims
《软件工程与软件架构》，作者：潘爱民、邹欣
《面向对象分析与设计》，作者：Craig Larman
《敏捷软件开发：原则、模式与实践》，作者：Robert C. Martin
《架构之美》，作者：中島健志
</code></pre>
<h3>推荐适合散心旅游的地方</h3>
<p>以下是我为您推荐的散心旅游地方：</p>
<pre><code>江南水乡：有着清新的江南水乡风景和悠久的历史文化，适合漫步古镇、游览园林，享受宁静悠闲的生活。

丽江古城：有着神秘的纳西风情和独特的文化，适合泡在茶馆听音乐、穿梭于古巷中慢慢品味，感受浓郁的古城气息。

敦煌莫高窟：拥有艺术瑰宝的敦煌莫高窟是许多人向往的朝圣圣地，适合沉浸在千年艺术的殿堂中，感受古代艺术的魅力。

沙漠：在宁静的沙漠中可以感受大自然的恢弘和神秘，适合乘坐骆驼，徜徉在沙漠中，观赏美丽的日落和星空。

风景秀丽的湖泊：湖泊风景优美，适合漫步湖畔、观赏湖中风光，放松心情，如西湖、洱海等。
</code></pre>
<p>这些地方都有着独特的风情与魅力，适合散心旅游。</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/22" rel="alternate"/><published>2023-04-29T17:24:10+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/21</id><title>港澳台居民在广东如何参加基本医疗保险？</title><updated>2023-07-02T03:01:12.535571+00:00</updated><content type="html"><![CDATA[<h1>港澳台居民在广东如何参加基本医疗保险？</h1>
<p><a href="http://www.cnbayarea.org.cn/policy/policy%20analysis/content/post_535492.html">http://www.cnbayarea.org.cn/policy/policy%20analysis/content/post_535492.html</a></p>
<p><a href="https://www.hk01.com/%E5%8D%B3%E6%99%82%E4%B8%AD%E5%9C%8B/609003/%E6%96%B0%E5%86%A0%E7%96%AB%E8%8B%97-%E6%B8%AF%E6%BE%B3%E4%BA%BA%E5%A3%AB%E5%8F%AF%E6%86%91%E8%AD%89%E5%9C%A8%E5%85%A7%E5%9C%B0%E6%8E%A5%E7%A8%AE-%E5%B1%85%E4%BD%8F%E8%AD%89%E8%88%87%E9%86%AB%E4%BF%9D%E7%94%B3%E8%AB%8B%E6%96%B9%E6%B3%95%E4%B8%80%E8%A6%BD">https://www.hk01.com/%E5%8D%B3%E6%99%82%E4%B8%AD%E5%9C%8B/609003/%E6%96%B0%E5%86%A0%E7%96%AB%E8%8B%97-%E6%B8%AF%E6%BE%B3%E4%BA%BA%E5%A3%AB%E5%8F%AF%E6%86%91%E8%AD%89%E5%9C%A8%E5%85%A7%E5%9C%B0%E6%8E%A5%E7%A8%AE-%E5%B1%85%E4%BD%8F%E8%AD%89%E8%88%87%E9%86%AB%E4%BF%9D%E7%94%B3%E8%AB%8B%E6%96%B9%E6%B3%95%E4%B8%80%E8%A6%BD</a></p>
<p><a href="https://m12333.cn/query/ck.html">https://m12333.cn/query/ck.html</a></p>
<p>手续</p>
<ul>
<li><input disabled="" type="checkbox"> 居住证</li>
</ul>
<p>深圳医保</p>
<p><a href="https://zhuanlan.zhihu.com/p/106871025">https://zhuanlan.zhihu.com/p/106871025</a></p>
<blockquote>
<p>深圳医保是最烂的，基本都是刷医保卡里的个人余额，也就是纯粹花自己的钱。除非一年花了很多，到达一个数字，才有统筹费用。以前广州，看什么都是统筹一部分，个人余额一部分。</p>
</blockquote>
<h2>港澳办：港澳居民内地纳税问题不以居住证为依据</h2>
<p><a href="https://www.sohu.com/a/249463247_800726">https://www.sohu.com/a/249463247_800726</a></p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/21" rel="alternate"/><published>2023-04-29T10:56:04+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/20</id><title>電影電視劇</title><updated>2023-07-02T03:01:12.628374+00:00</updated><content type="html"><![CDATA[<p>電影電視劇</p>
<p>搜了一下如下主題的電影電視劇：程序員電影 程序員電視劇  技術創業電影 創業紀錄片 程序員紀錄片</p>
<p>硅谷传奇 Pirates of Silicon Valley[3]
社交网络 The Social Network[2]
超验骇客 Transcendence[8]
代码奔腾 Code Rush (2000)[9]
硅谷第一季
互联网之子(The Internet's Own Boy: The Story of Aaron Swartz)
【七集纪录片】像程序员一样思考-Think Like a Coder
央视为程序员拍了纪录片，《码农的异想世界》
无节制消费元凶，多个平台都可以看，评分8.8
为什么贫穷，这部纪录片一共八集，每集一小时
富哥哥穷弟弟，这部纪录片记录了1对亲生兄弟
走进比尔：解码比尔盖茨，评分9.3
美国商业大亨传奇评分9.3
富翁谷底翻身技巧
金钱与我，评分8.2
成为沃伦巴菲特，评分8.7
一团火：小米创业 8 年内部纪录片
2015 年主演的电影《史蒂夫·乔布斯》。
操作系统革命 Rovolutuon OS
《运转乾坤》 该片被沃顿商学院名列金融电影必看第一位。讲述了瓦伦丁从街头乞讨的黑人小混混与从事期货交易的温索普互换身份的故事
《可口可乐小子》
《华尔街》
《抢钱世界》
门口的野蛮人》
教父
《网络风云
企业人格诊断书
优势合作》
当幸福来敲men
《实习大叔》
《中国合伙人》
《创世纪》中国评分8.5-9.0全2部107集
《天 道》中国评分9.2全24集
《大染坊》中国评分9.2全24集
《大时代》中国评分9.3全40集
《大宅门》中国评分9.4全40集
《亿 万》美国评级8.9-9.3全6季72集
《纸钞屋》西班牙比分8.6-9.4共5季48集
《硅 谷》美国比分9.2-9.4共6季第53集
《创业年代》
纪录片《年轻进行时》讲述云造科技创业故事 - C财经
纪录片《创新之路》第七集《市场为王》：谁给谷歌当房东
百度创业20周年纪录片《二十度》上线揭秘技术信仰背后的故事
科教频道特别节目创业纪录片《创业英雄·青春》 - CCTV节目官网
创业英雄（系列纪录片）_百度百科
大型纪录片《征程》 第四集动能的转换 - 奥一网</p>
<h1>Ref</h1>
<p><a href="https://cloud.tencent.com/developer/article/1799356">https://cloud.tencent.com/developer/article/1799356</a>
<a href="https://www.runoob.com/w3cnote/10-programmer-documentary.html">https://www.runoob.com/w3cnote/10-programmer-documentary.html</a>
<a href="https://zhuanlan.zhihu.com/p/536681290">https://zhuanlan.zhihu.com/p/536681290</a>
<a href="http://m.cyol.com/content/2018-03/10/content_17010436.htm">http://m.cyol.com/content/2018-03/10/content_17010436.htm</a>
<a href="https://www.163.com/dy/article/HKRRTJQ40553P17N.html">https://www.163.com/dy/article/HKRRTJQ40553P17N.html</a>
<a href="http://m.cnr.cn/news/20200927/t20200927_525279105.html">http://m.cnr.cn/news/20200927/t20200927_525279105.html</a></p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/20" rel="alternate"/><published>2023-04-15T06:14:40+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/19</id><title> 20230407放假四天</title><updated>2023-07-02T03:01:12.723253+00:00</updated><content type="html"><![CDATA[<h1>20230407</h1>
<h2>done</h2>
<ul>
<li>
<del>語音識別，</del><ul>
<li><del>OpenAI Whisper 模型</del></li>
<li><del><a href="https://pytranscriber.github.io/download/">https://pytranscriber.github.io/download/</a> crash</del></li>
</ul>
</li>
<li>
<del>推荐播客app。如何给播客添加字幕？ podcast transript https://www.zhihu.com/question/21067130</del><ul>
<li><del>打开chrome的实时字幕功能，只能在桌面使用</del></li>
<li><del>App名字: SNIPD。能通过AI识别语音转换成文本，甚至带时间轴，正如问题描述所说，像歌词一样显示。而且文本准确度很高。还会用speaker 1, speaker 2…… 区分出节目中的不同说话者。注意: 每一期节目的文本可能会花费几分钟时间转换完成。其他宝藏功能: 每一期节目可智能划分章节，点击即可跳转。</del></li>
<li><del>eslpodcast 英语教学 带字幕</del></li>
<li><del>我用的app不支持字幕 https://github.com/AntennaPod/AntennaPod/issues/4935</del></li>
</ul>
</li>
<li>
<del>推荐播客</del><ul>
<li><del>This American Life</del></li>
<li><del>This I Belive</del></li>
<li><del>NPR Ted hour，American Scientific没有字幕</del></li>
<li><del>ESL，Grammer girl</del></li>
<li><del>BBC出品的The Documentary</del></li>
</ul>
</li>
<li>
远程访问<ul>
<li><del>vscode remote tunnel test: 链接的时候报错说是连不上<code>Workbench 無法連線到伺服器 (錯誤: WrappedError(WrappedError { message: &quot;timed out looking for socket&quot;, original: &quot;deadline has elapsed&quot; }))</code>，并且会有一个code_tunnel进程，看起来有些不正常</del></li>
<li>jumpserver test</li>
<li>牧云主机助手测试</li>
</ul>
</li>
<li><del>地租交钱</del></li>
<li>llama 自学习</li>
<li><del>非那雄胺：非那雄胺需要长期使用，并且最好维持每天1mg的治疗用量长期治疗。非那雄胺一般耐受性良好，不良反应通常轻微，一般不必中止治疗。中止非那雄胺治疗后这些不良反应消失，也有许多患者在继续用药的过程中这些不良反应自行消失。非那雄胺是目前人类对抗脱发最好的药物，临床上其有效率70-90%，40-60%可以显著改善脱发外观。副作用发生率不高于3%，不良反应停药后2周左右都可以消退.</del> 买了，等待拿回来</li>
<li><del>洗何庆宇和我自己的衣服，以及枕套</del></li>
<li><del>清洁地板</del>，厕所马桶<del>，洗地机</del></li>
<li><del>bazel试用以及与modern cmake比较</del></li>
<li>玩玩买的单片机：马达，温度，距离</li>
</ul>
<h2>in progress</h2>
<ul>
<li>接活，看看zhihu上一般用啥技术接活效率高</li>
<li>智能家居：人物识别</li>
<li>智能家居：chatgpt</li>
<li>搞定所you内地账户网银，尤其银行，手机<del>，陆金所</del></li>
<li>手机空间咋清理？</li>
<li>弄一下老婆的回家之后翻墙上网</li>
<li>shein買東西：需要超过二百才免运费</li>
<li>telegram上的东西</li>
<li>pocket上的东西</li>
<li>trello上的东西</li>
<li>
学习vlog视频制作<ul>
<li>目标：我只需要简单准备一个ppt或者视频加字幕，他就做一个视频出来</li>
<li>tts人工语音合成字幕</li>
<li>AI主持人</li>
</ul>
</li>
<li>
<del>远距离拾音，麦克风阵列</del><ul>
<li><del>小爱音箱拆解，破解</del>失败</li>
</ul>
</li>
<li>申请护照</li>
</ul>
<h2>项目</h2>
<ul>
<li>
类似于SNIPD带AI语音识别的app<ul>
<li>Value 学英文的人有这个需要，但具体多少人会花钱买不好说。具体做起来可能还是免费为主但是用流量限制</li>
<li>Effort 开发成本应该不算多，一个是app，一个是服务器成本</li>
<li>
</li>
</ul>
</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/19" rel="alternate"/><category term="TODO"/><published>2023-04-10T14:34:23+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/18</id><title>疑问：直流伺服电机停在某个位置的时候是否是所谓的“堵转”？</title><updated>2023-07-02T03:01:12.853537+00:00</updated><content type="html"><![CDATA[<p>我发现网上有人已经问过类似。但是没有回。</p>
<p><a href="https://www.amobbs.com/thread-5545108-1-1.html">https://www.amobbs.com/thread-5545108-1-1.html</a></p>
<p>直流伺服电机用在平衡车上，电机电流问题请教：</p>
<p>一、印象中有本教材上提到伺服电机因内阻较小，启动电流或者说堵转电流较大，因此不允许直流电机不允许长期处于堵转状态，以防止电流过大烧毁电
源或电机，原因是启动瞬间因电机转速为零，没有建立反电动势，此时的电流I=电压U/电机直流内阻R，近似短路电流，因此启动电流比较大。</p>
<p>二、问题：</p>
<p>2.1 直流电机的启动电流最大值和堵转电流是一样大吗？</p>
<p>2.2 我手头上有个直流电机，额定电压是12V，测量内阻是1.1欧，这个电机的启动电流最大值（堵转电流）是不是10A左右？，如果用12V,100W的电源，那它的功率（100瓦）就不满足电机瞬时启动功率(约111瓦)的要求？是不是要限流启动，或者改用软启动方式（软启动方式用在位置伺服中是否合适？）；或换大功率200W、400W电源？</p>
<p>2.3 最想不通的一点：平衡小车处于平衡位置（此时应该是动态平衡吧，就是频繁正反转，也就是反复的起-停-起-停......，反反复复的启动，电流是否很大
呢？），此时电机是否处于堵转状态？此时的电流是不是堵转电流？如果是，电源是不是一直需要频繁的输出大电流？</p>
<p>2.4 平衡小车处于平衡状态，“堵转电流”和负载的惯量有关系吗？如果保持平衡时的电流是“堵转电流”，那不就和负载惯量没关系了，感觉不对啊？</p>
<p>ref
什么是 <a href="https://www.yibumotor.com/news/656.html">https://www.yibumotor.com/news/656.html</a></p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/18" rel="alternate"/><published>2023-04-10T08:12:22+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/17</id><title>欢乐颂3</title><updated>2023-07-02T03:01:12.952134+00:00</updated><content type="html"><![CDATA[<p>欢乐颂3</p>
<p>豆瓣评分挺差的，可是我觉得还不错。</p>
<p>然后跟之前还是差不多，就是嗯，年轻小妹妹，但是你家庭背景各有不同。还是挺有实际的，现实的代表性。比如当大姐，家里一堆弟弟妹妹要照顾。但是平均来看这个片里面这一堆女人还是高于我们现实中的人的倍镜，实力，和水平了。</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/17" rel="alternate"/><published>2023-04-09T06:21:47+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/16</id><title>虽然马云经常哗众取宠，但是他说的有些话还是很有道理的</title><updated>2023-07-02T03:01:13.059872+00:00</updated><content type="html"><![CDATA[<p>虽然马云经常哗众取宠，但是他说的有些话还是很有道理的。企业的战略不应该是跟钱相关的，天天想钱的财务官不可能做好CEO。https://www.youtube.com/watch?v=TiB_TjlxYNM&amp;ab_channel=%E5%A4%A7%E7%83%AD%E9%97%A8 一个做企业家要做得久，做得好，他每天考虑的大部分的事情都应该跟钱没有关系，和钱有关的都不是战略性的。不以利益为出发点的战略决策，才是真正的庙堂之策。所以我一直相信一个好的财务总监很难做好董事长，因为好的财务总监脑子里全部都是钱，脑子里全是钱的人是很难做好事情</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/16" rel="alternate"/><published>2023-04-08T13:54:34+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/15</id><title>物理学变成玄学了</title><updated>2023-07-02T03:01:13.151408+00:00</updated><content type="html"><![CDATA[<p>量子擦除，双峰干涉，物理学变成玄学了。终于明白爱因斯坦老爷子的心态了。https://www.youtube.com/watch?v=Ik58awh2Mp4&amp;ab_channel=%E6%9D%8E%E6%B0%B8%E4%B9%90%E8%80%81%E5%B8%88</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/15" rel="alternate"/><published>2023-04-08T13:38:41+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/14</id><title>播客podcast </title><updated>2023-07-02T03:01:13.241019+00:00</updated><content type="html"><![CDATA[<ul>
<li>
推荐播客app。如何给播客添加字幕？ podcast transript <a href="https://www.zhihu.com/question/21067130">https://www.zhihu.com/question/21067130</a><ul>
<li>打开chrome的实时字幕功能，只能在桌面使用</li>
<li>App名字: SNIPD。能通过AI识别语音转换成文本，甚至带时间轴，正如问题描述所说，像歌词一样显示。而且文本准确度很高。还会用speaker 1, speaker 2…… 区分出节目中的不同说话者。注意: 每一期节目的文本可能会花费几分钟时间转换完成。其他宝藏功能: 每一期节目可智能划分章节，点击即可跳转。</li>
<li>eslpodcast 英语教学 带字幕</li>
<li>我用的app不支持字幕 <a href="https://github.com/AntennaPod/AntennaPod/issues/4935">https://github.com/AntennaPod/AntennaPod/issues/4935</a></li>
</ul>
</li>
<li>
推荐播客<ul>
<li>This American Life</li>
<li>This I Belive</li>
<li>NPR Ted hour，American Scientific没有字幕</li>
<li>ESL，Grammer girl</li>
<li>BBC出品的The Documentary</li>
</ul>
</li>
</ul>
<p>TODO</p>
<ul>
<li><input disabled="" type="checkbox"> 让播客app支持字幕 <a href="https://github.com/AntennaPod/AntennaPod/issues/4935">https://github.com/AntennaPod/AntennaPod/issues/4935</a></li>
<li><input disabled="" type="checkbox"> 自建rss服务，使用openai whisper ai模型给播客增加字幕</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/14" rel="alternate"/><published>2023-04-08T04:25:12+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/13</id><title>windows版本的timeit</title><updated>2023-07-02T03:01:13.328073+00:00</updated><content type="html"><![CDATA[<p>代码是从stackoverflow里面找的https://stackoverflow.com/questions/673523/how-do-i-measure-execution-time-of-a-command-on-the-windows-command-line</p>
<pre><code class="language-bash">@echo off
@setlocal

set start=%time%
echo %start%

:: Runs your command
cmd /c %*

set end=%time%
set options=&quot;tokens=1-4 delims=:.,&quot;
for /f %options% %%a in (&quot;%start%&quot;) do set start_h=%%a&amp;set /a start_m=100%%b %% 100&amp;set /a start_s=100%%c %% 100&amp;set /a start_ms=100%%d %% 100
for /f %options% %%a in (&quot;%end%&quot;) do set end_h=%%a&amp;set /a end_m=100%%b %% 100&amp;set /a end_s=100%%c %% 100&amp;set /a end_ms=100%%d %% 100

set /a hours=%end_h%-%start_h%
set /a mins=%end_m%-%start_m%
set /a secs=%end_s%-%start_s%
set /a ms=%end_ms%-%start_ms%
if %ms% lss 0 set /a secs = %secs% - 1 &amp; set /a ms = 100%ms%
if %secs% lss 0 set /a mins = %mins% - 1 &amp; set /a secs = 60%secs%
if %mins% lss 0 set /a hours = %hours% - 1 &amp; set /a mins = 60%mins%
if %hours% lss 0 set /a hours = 24%hours%
if 1%ms% lss 100 set ms=0%ms%

:: Mission accomplished
set /a totalsecs = %hours%*3600 + %mins%*60 + %secs%
echo start=%start%
echo end=%end%
echo command took %hours%:%mins%:%secs%.%ms% (%totalsecs%.%ms%s total)

</code></pre>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/13" rel="alternate"/><published>2023-04-07T15:15:42+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/12</id><title>语音合成tts测试</title><updated>2023-07-02T03:01:13.421789+00:00</updated><content type="html"><![CDATA[<p>语音合成tts测试</p>
<p>微软的edge tts</p>
<pre><code class="language-bash"># https://pypi.org/project/edge-tts/
pip install edge-tts
path %path%;F:\Users\cutepig\Downloads\mpv-x86_64-20230402-git-0f13c38

edge-tts --text &quot;Hello, world!&quot; --write-media hello.mp3
edge-playback --text &quot;Hello, world!&quot;
edge-playback --text &quot;你是谁 hello work&quot; --voice zh-TW-HsiaoYuNeural
edge-playback -f 1.txt --voice zh-TW-HsiaoYuNeural

# 实时输出，而不是通过中间文件
F:\&gt;edge-tts -f 1.txt --voice zh-TW-HsiaoYuNeural | mpv -
[file] Reading from stdin...
 (+) Audio --aid=1 (mp3 1ch 24000Hz)
AO: [wasapi] 48000Hz stereo 2ch float
A: 00:00:03 / 00:00:04 (74%)

</code></pre>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/12" rel="alternate"/><category term="NLP"/><published>2023-04-07T14:11:49+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/11</id><title>Openai whisper语音识别测试</title><updated>2023-07-02T03:01:13.522875+00:00</updated><content type="html"><![CDATA[<p>Openai whisper语音识别测试</p>
<pre><code>pip install git+https://github.com/openai/whisper.git 
path %path%;F:\sw\ffmpeg-4.1.4-win64-static\bin

whisper \\192.168.1.124\MyShare\podsync\stone\_apS6CxV_e0.mp3 --language Chinese --model medium
</code></pre>
<p>下载的Model在这里</p>
<pre><code>C:\WINDOWS\system32&gt;dir C:\Users\cutepig\.cache\whisper
 Volume in drive C is ssd
 Volume Serial Number is EB71-E2FB

 Directory of C:\Users\cutepig\.cache\whisper

2023/04/07  21:31    &lt;DIR&gt;          .
2023/04/07  21:31    &lt;DIR&gt;          ..
2023/04/07  21:23     1,528,008,539 medium.pt
2023/04/07  21:31       483,617,219 small.pt
               2 File(s)  2,011,625,758 bytes
               2 Dir(s)  53,389,697,024 bytes free
</code></pre>
<p>测试</p>
<pre><code>C:\Users\cutepig&gt;whisper \\192.168.1.124\MyShare\podsync\stone\_apS6CxV_e0.mp3 --language Chinese
f:\users\cutepig\appdata\local\programs\python\python38\lib\site-packages\whisper\transcribe.py:114: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn(&quot;FP16 is not supported on CPU; using FP32 instead&quot;)
[00:00.000 --&gt; 00:02.560] 大家好 今天是2020年的3月1号星期日
[00:02.560 --&gt; 00:04.160] 9天前我们报了一个消息
[00:04.160 --&gt; 00:06.320] 说美国和塔利班要签署和平前议
[00:06.320 --&gt; 00:07.200] 但是要等9天
[00:07.200 --&gt; 00:10.240] 要看塔利班那边能不能控制他们下巴的恐怖分子
[00:10.240 --&gt; 00:11.840] 9天过去了 控制得还不错
[00:11.840 --&gt; 00:12.800] 听伙搞得还挺好
[00:12.800 --&gt; 00:13.760] 美国也比较满意
[00:13.760 --&gt; 00:18.800] 美国国务卿蓬佩奥已经从华盛顿争飞机抵达了卡塔尔的首都
[00:18.800 --&gt; 00:20.480] 现在协议应该已经签完了
[00:20.480 --&gt; 00:21.200] 因为到3月1号了
[00:21.200 --&gt; 00:22.240] 协议应该已经签完了
[00:22.240 --&gt; 00:25.040] 结束了美国在阿富汗的18年的战争
[00:25.040 --&gt; 00:28.320] 那么从2001年的9月11号1911之后
</code></pre>
<p>测试whisper.cpp，失败</p>
<pre><code class="language-bash">cutepig@DESKTOP-CM4NK5L MINGW64 ~
$ cd /F/_codes/whisper.cpp

cutepig@DESKTOP-CM4NK5L MINGW64 /F/_codes/whisper.cpp
#下载模型
$ bash ./models/download-ggml-model.sh base.en
Downloading ggml model base.en from &#x27;https://huggingface.co/ggerganov/whisper.cpp&#x27; ...
ggml-base.en.bin         100%[==================================&gt;] 141.11M  9.55MB/s    in 13s
Done! Model &#x27;base.en&#x27; saved in &#x27;models/ggml-base.en.bin&#x27;
You can now use it like this:

  $ ./main -m models/ggml-base.en.bin -f samples/jfk.wav


cutepig@DESKTOP-CM4NK5L MINGW64 /F/_codes/whisper.cpp
# 编译代码
$ make
I whisper.cpp build info:
I UNAME_S:  MINGW64_NT-10.0-19044
I UNAME_P:  unknown
I UNAME_M:  x86_64
I CFLAGS:   -I.              -O3 -DNDEBUG -std=c11   -fPIC -mfma -mf16c -mavx -mavx2
I CXXFLAGS: -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC
I LDFLAGS:
I CC:       cc (GCC) 11.3.0
I CXX:      g++ (GCC) 11.3.0

cc  -I.              -O3 -DNDEBUG -std=c11   -fPIC -mfma -mf16c -mavx -mavx2   -c ggml.c -o ggml.o
g++ -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC -c whisper.cpp -o whisper.o
whisper.cpp: In function ‘void dft(const std::vector&lt;float&gt;&amp;, std::vector&lt;float&gt;&amp;)’:
whisper.cpp:2200:29: error: ‘M_PI’ was not declared in this scope
 2200 |             float angle = 2*M_PI*k*n/N;
      |                             ^~~~
whisper.cpp: In function ‘void fft(const std::vector&lt;float&gt;&amp;, std::vector&lt;float&gt;&amp;)’:
whisper.cpp:2251:25: error: ‘M_PI’ was not declared in this scope
 2251 |         float theta = 2*M_PI*k/N;
      |                         ^~~~
whisper.cpp: In function ‘bool log_mel_spectrogram(whisper_state&amp;, const float*, int, int, int, int, int, int, const whisper_filters&amp;, bool, whisper_mel&amp;)’:
whisper.cpp:2286:39: error: ‘M_PI’ was not declared in this scope
 2286 |         hann[i] = 0.5*(1.0 - cos((2.0*M_PI*i)/(fft_size)));
      |                                       ^~~~
make: *** [Makefile:194: whisper.o] Error 1

cutepig@DESKTOP-CM4NK5L MINGW64 /F/_codes/whisper.cpp
$ code .
-bash: code: command not found

cutepig@DESKTOP-CM4NK5L MINGW64 /F/_codes/whisper.cpp
$ code .
-bash: code: command not found

cutepig@DESKTOP-CM4NK5L MINGW64 /F/_codes/whisper.cpp
$ make
I whisper.cpp build info:
I UNAME_S:  MINGW64_NT-10.0-19044
I UNAME_P:  unknown
I UNAME_M:  x86_64
I CFLAGS:   -I.              -O3 -DNDEBUG -std=c11   -fPIC -mfma -mf16c -mavx -mavx2
I CXXFLAGS: -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC
I LDFLAGS:
I CC:       cc (GCC) 11.3.0
I CXX:      g++ (GCC) 11.3.0

g++ -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC -c whisper.cpp -o whisper.o
g++ -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC examples/main/main.cpp examples/common.cpp ggml.o whisper.o -o main
./main -h

usage: ./main [options] file0.wav file1.wav ...

options:
  -h,        --help              [default] show this help message and exit
  -t N,      --threads N         [4      ] number of threads to use during computation
  -p N,      --processors N      [1      ] number of processors to use during computation
  -ot N,     --offset-t N        [0      ] time offset in milliseconds
  -on N,     --offset-n N        [0      ] segment index offset
  -d  N,     --duration N        [0      ] duration of audio to process in milliseconds
  -mc N,     --max-context N     [-1     ] maximum number of text context tokens to store
  -ml N,     --max-len N         [0      ] maximum segment length in characters
  -sow,      --split-on-word     [false  ] split on word rather than on token
  -bo N,     --best-of N         [5      ] number of best candidates to keep
  -bs N,     --beam-size N       [-1     ] beam size for beam search
  -wt N,     --word-thold N      [0.01   ] word timestamp probability threshold
  -et N,     --entropy-thold N   [2.40   ] entropy threshold for decoder fail
  -lpt N,    --logprob-thold N   [-1.00  ] log probability threshold for decoder fail
  -su,       --speed-up          [false  ] speed up audio by x2 (reduced accuracy)
  -tr,       --translate         [false  ] translate from source language to english
  -di,       --diarize           [false  ] stereo audio diarization
  -nf,       --no-fallback       [false  ] do not use temperature fallback while decoding
  -otxt,     --output-txt        [false  ] output result in a text file
  -ovtt,     --output-vtt        [false  ] output result in a vtt file
  -osrt,     --output-srt        [false  ] output result in a srt file
  -owts,     --output-words      [false  ] output script for generating karaoke video
  -fp,       --font-path         [/System/Library/Fonts/Supplemental/Courier New Bold.ttf] path to a monospace font for karaoke video
  -ocsv,     --output-csv        [false  ] output result in a CSV file
  -oj,       --output-json       [false  ] output result in a JSON file
  -of FNAME, --output-file FNAME [       ] output file path (without file extension)
  -ps,       --print-special     [false  ] print special tokens
  -pc,       --print-colors      [false  ] print colors
  -pp,       --print-progress    [false  ] print progress
  -nt,       --no-timestamps     [true   ] do not print timestamps
  -l LANG,   --language LANG     [en     ] spoken language (&#x27;auto&#x27; for auto-detect)
             --prompt PROMPT     [       ] initial prompt
  -m FNAME,  --model FNAME       [models/ggml-base.en.bin] model path
  -f FNAME,  --file FNAME        [       ] input WAV file path

g++ -I. -I./examples -O3 -DNDEBUG -std=c++11 -fPIC examples/bench/bench.cpp ggml.o whisper.o -o bench

#执行测试，失败
cutepig@DESKTOP-CM4NK5L MINGW64 /F/_codes/whisper.cpp
$ ./main -f samples/jfk.wav
whisper_init_from_file_no_state: loading model from &#x27;models/ggml-base.en.bin&#x27;
whisper_model_load: loading model
whisper_model_load: n_vocab       = 51864
whisper_model_load: n_audio_ctx   = 1500
whisper_model_load: n_audio_state = 512
whisper_model_load: n_audio_head  = 8
whisper_model_load: n_audio_layer = 6
whisper_model_load: n_text_ctx    = 448
whisper_model_load: n_text_state  = 512
whisper_model_load: n_text_head   = 8
whisper_model_load: n_text_layer  = 6
whisper_model_load: n_mels        = 80
whisper_model_load: f16           = 1
whisper_model_load: type          = 2
whisper_model_load: mem required  =  218.00 MB (+    6.00 MB per decoder)
whisper_model_load: adding 1607 extra tokens
whisper_model_load: model ctx     =  140.60 MB
Illegal instruction (core dumped)

cutepig@DESKTOP-CM4NK5L MINGW64 /F/_codes/whisper.cpp

</code></pre>
<p>试用SpeechRecognition </p>
<p>这个包里面包含了很多云服务的语音识别功能，如果没有api key的话支持recognize_sphinx和recognize_google</p>
<p>我试了下中文，效果比whisper差很多</p>
<pre><code class="language-bash">AUDIO_FILE = path.join(path.dirname(path.realpath(__file__)), &quot;chinese.flac&quot;)
language = &#x27;zh-CN&#x27;
# recognize speech using Sphinx
try:
    print(&quot;Sphinx thinks you said &quot; + r.recognize_sphinx(audio, language=language))
except sr.UnknownValueError:
    print(&quot;Sphinx could not understand audio&quot;)

# 识别效果很差
F:\_codes&gt;python F:\_codes\speech_recognition\examples\audio_transcribe.py
Sphinx thinks you said 上 世纪 之交
Google Speech Recognition could not understand audio

F:\_codes&gt;whisper f:\_codes\speech_recognition\examples\chinese.flac --language Chinese
f:\users\cutepig\appdata\local\programs\python\python38\lib\site-packages\whisper\transcribe.py:114: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn(&quot;FP16 is not supported on CPU; using FP32 instead&quot;)
[00:00.000 --&gt; 00:01.000] 砸自己的腳
</code></pre>
<p>TODO</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 跑的太慢了，测一下https://github.com/ggerganov/whisper.cpp</li>
<li><input checked="" disabled="" type="checkbox"> 除了语音识别，还有啥local的语音生成的tts lib？或者能免费用微软的tts也行</li>
<li><input disabled="" type="checkbox"> 如何支持语音直接输入，而不是文件输入</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/11" rel="alternate"/><category term="NLP"/><category term="TODO"/><published>2023-04-07T13:45:31+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/10</id><title>windows脚本：强制删除目录</title><updated>2023-07-02T03:01:13.619788+00:00</updated><content type="html"><![CDATA[<pre><code>SET DIRECTORY_NAME=%~1
TAKEOWN /f &quot;%DIRECTORY_NAME%&quot; /r /d y
ICACLS &quot;%DIRECTORY_NAME%&quot; /grant administrators:F /t
ICACLS &quot;%DIRECTORY_NAME%&quot; /reset /T
echo We will delete the folder &quot;%DIRECTORY_NAME%&quot;
PAUSE
rd/s/q &quot;%DIRECTORY_NAME%&quot;


</code></pre>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/10" rel="alternate"/><published>2023-04-07T11:32:55+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/9</id><title>网传拼多多APP恶意提取权限，偷窥用户隐私，偷偷安装应用。</title><updated>2023-07-02T03:01:13.715755+00:00</updated><content type="html"><![CDATA[<p>真是烂透了。</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/9" rel="alternate"/><published>2023-04-06T13:21:23+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/8</id><title>网传“中国电科成都员工痛批领导安排加班”，四川省与成都市总工会介入</title><updated>2023-07-02T03:01:13.800786+00:00</updated><content type="html"><![CDATA[<p>我只能说，真他妈烂透了。</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/8" rel="alternate"/><published>2023-04-05T15:27:07+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/7</id><title>个人密码管理软件</title><updated>2023-07-02T03:01:13.880581+00:00</updated><content type="html"><![CDATA[<p>微软的Microsoft authenticator。这个是我现在正在用的，还在试用期间。</p>
<p>剩下这几个还没用过，但据说是开源免费的。如果有需要可以玩一下。
keenpass</p>
<p>Bitwarden</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/7" rel="alternate"/><published>2023-04-05T04:19:41+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/6</id><title>alpaca.cpp</title><updated>2023-07-02T03:01:14.095414+00:00</updated><content type="html"><![CDATA[<p>alpaca.cpp</p>
<p>这是啥：一个基于llama微调后的模型</p>
<p>如何本地运行？</p>
<ul>
<li>下载code <a href="https://github.com/antimatter15/alpaca.cpp">https://github.com/antimatter15/alpaca.cpp</a></li>
<li>下载模型 <code>Torrent: </code>magnet:?xt=urn:btih:053b3d54d2e77ff020ebddf51dad681f2a651071&amp;dn=ggml-alpaca-13b-q4.bin&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&amp;tr=udp%3A%2F%2Fopentracker.i2p.rocks%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2F9.rarbg.com%3A2810%2Fannounce``</li>
<li>编译运行</li>
</ul>
<pre><code>git clone https://github.com/antimatter15/alpaca.cpp
cd alpaca.cpp

cmake .
cmake --build . --config Release
.\Release\chat.exe

E:\&gt;F:\_codes\alpaca.cpp\build\debug\chat.exe
main: seed = 1679276051
llama_model_load: loading model from &#x27;ggml-alpaca-7b-q4.bin&#x27; - please wait ...
llama_model_load: ggml ctx size = 6065.34 MB
llama_model_load: memory_size =  2048.00 MB, n_mem = 65536
llama_model_load: loading model part 1/1 from &#x27;ggml-alpaca-7b-q4.bin&#x27;
llama_model_load: ....... done
llama_model_load: model size =   842.06 MB / num tensors = 59

system_info: n_threads = 4 / 4 | AVX = 1 | AVX2 = 1 | AVX512 = 0 | FMA = 0 | NEON = 0 | ARM_FMA = 0 | F16C = 0 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 0 | VSX = 0 |
main: interactive mode on.
sampling parameters: temp = 0.100000, top_k = 40, top_p = 0.950000, repeat_last_n = 64, repeat_penalty = 1.300000

</code></pre>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/6" rel="alternate"/><category term="NLP"/><published>2023-03-20T01:20:52+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/5</id><title>小爱音箱使用chatgpt</title><updated>2023-07-02T03:01:14.199491+00:00</updated><content type="html"><![CDATA[<p>尝试了下https://github.com/yihong0618/xiaogpt，果然能用
就差一个openai账号了</p>
<pre><code>set OPENAI_API_KEY=${your_api_key}
xiaogpt --hardware L15A --use_chatgpt_api
</code></pre>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/5" rel="alternate"/><category term="smart home"/><published>2023-03-19T16:37:26+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/4</id><title>免費認證的課程</title><updated>2023-07-02T03:01:14.290428+00:00</updated><content type="html"><![CDATA[<p>免費認證
freecodecamp.org/chinese/</p>
<p>免費看，但沒有免費認證
<a href="https://www.classcentral.com/report/coursera-free-online-courses/#Computer%20Science">https://www.classcentral.com/report/coursera-free-online-courses/#Computer%20Science</a></p>
<p><a href="https://www.google.com/search?q=software+audit+courses+free&amp;biw=393&amp;bih=721&amp;sxsrf=AJOqlzWRdnC-RVsfyGdiauteqowY3jZI7g%3A1677916933512&amp;ei=BfsCZMPzHuX9hwO4poqQAg&amp;oq=software+audit+courses+free&amp;gs_lcp=ChNtb2JpbGUtZ3dzLXdpei1zZXJwEAMyBAgAEB4yBQghEKABMgUIIRCgATIFCCEQoAEyBQghEKABOgoIABBHENYEELADSgQIQRgAUMIGWMYOYOIPaAFwAHgAgAG5AYgBuQGSAQMwLjGYAQCgAQHIAQfAAQE&amp;sclient=mobile-gws-wiz-serp">https://www.google.com/search?q=software+audit+courses+free&amp;biw=393&amp;bih=721&amp;sxsrf=AJOqlzWRdnC-RVsfyGdiauteqowY3jZI7g%3A1677916933512&amp;ei=BfsCZMPzHuX9hwO4poqQAg&amp;oq=software+audit+courses+free&amp;gs_lcp=ChNtb2JpbGUtZ3dzLXdpei1zZXJwEAMyBAgAEB4yBQghEKABMgUIIRCgATIFCCEQoAEyBQghEKABOgoIABBHENYEELADSgQIQRgAUMIGWMYOYOIPaAFwAHgAgAG5AYgBuQGSAQMwLjGYAQCgAQHIAQfAAQE&amp;sclient=mobile-gws-wiz-serp</a></p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/4" rel="alternate"/><published>2023-03-19T15:27:55+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/3</id><title>项目</title><updated>2023-07-02T03:01:14.380149+00:00</updated><content type="html"><![CDATA[<h1>个人简介</h1>
<p>Many years software development working experience, strong C/C++ develop and debug skills, understanding of software design, generic programming, multi-threaded programming</p>
<p>Semiconductor industry vision inspection application background</p>
<p>Highly self-motivated, sincere, good team work, high analytical skills, curious at new knowledge, hard working</p>
<p>Technology stack: c++, Python, machine vision, windows desktop development, architecture design, Rust</p>
<p>多年软件开发工作经验，较强的C/C++开发调试能力，了解软件设计，泛型编程，多线程编程</p>
<p>半导体行业视觉检测应用背景</p>
<p>高度上进心，真诚，良好的团队合作精神，高分析能力，对新知识充满好奇，吃苦耐劳</p>
<p>技术栈：c++, Python, 机器视觉，windows桌面开发，架构设计, Rust</p>
<h1>个人项目：mypipe</h1>
<ul>
<li>功能：是一个代理服务器，但是支持自定义的协议。主要使用场合是在某些正常协议不能使用的时候,自定义协议就可以破除这些限制。</li>
<li>语言：python, Rust</li>
<li>架构：包含客户端和服务端。客户端通过网络连接到服务端之后，服务端接收外边的数据，然后把数据转发到客户端。客户端是用Python编写。服务端我写了两个，一个是用Python，一个是用Rust</li>
</ul>
<h1>公司项目：某游戏客户端国际化</h1>
<ul>
<li>功能：把基于MBCS的中文程序使用unicode编码实现国际化。</li>
<li>语言：C++</li>
<li>架构：这个程序是基于MFC的。主要的改动是把字符串处理改成Unicode编码。通过配置文件来配置语言显示</li>
</ul>
<h1>公司项目：机器视觉软件</h1>
<ul>
<li>功能：太阳能电池板3D检测系统。检查太阳能电池板的厚度, TTV是否符合要求，检测SawMark之类缺陷</li>
<li>语言：C++</li>
<li>架构：整个系统包含软件硬件以及光学。本人主要做软件方面。设计了整个应用的架构，以及主要的编码。大量使用多核运算提高UPH。使用内存池减少动态内存分配</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/3" rel="alternate"/><published>2023-03-19T15:25:56+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/2</id><title>做一个modern c++的讲座</title><updated>2023-07-02T03:01:14.474712+00:00</updated><content type="html"><![CDATA[<h1>内容简介</h1>
<p>讲以前的best practise现在已经不是了，主要包括</p>
<ul>
<li>函数直接返回值，而不需要返回参数。移动语义等。以前的vector里面放sharedptr不需要了，可以通过编写可以移动的变量来做到</li>
<li>lambda，方便stl alg functional写法</li>
<li>auto</li>
<li>design pattern的老套做法的变革，现在更可以非侵入性。要求baseclass的，vs 鸭子类型</li>
</ul>
<h1>设计原则</h1>
<ul>
<li>封装。object维护内部状态</li>
<li>哪个更好，自由函数，成员函数，etc</li>
<li>尽量值语义 ，减少 引用语意</li>
<li>继承 vs fn object</li>
<li>prefer enforcement to convention</li>
</ul>
<h1>concerns</h1>
<ul>
<li>函数直接返回值：代码性能不是那么一目了然</li>
</ul>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/2" rel="alternate"/><published>2023-03-19T15:23:08+00:00</published></entry><entry><id>https://github.com/cutepig123/gitblog/issues/1</id><title>程序員怎樣在業餘時間掙到錢？</title><updated>2023-07-02T03:01:14.565978+00:00</updated><content type="html"><![CDATA[<h3>程序員怎樣在業餘時間掙到錢？</h3>
<p>ChatGPT
副業開發：利用技能可以自行開發應用程式，個人開發軟體、APP、插件等，將成品上架交易平台進行銷售。</p>
<p>代碼審核：可以利用擅長的編程技術為企業或其他開發者進行代碼審核，減少其系統中存在的問題和漏洞。</p>
<p>程序員顧問：利用自己的經驗和編程技能，為企業或個人提供諮詢服務，協助客戶解決程序開發方面的問題。</p>
<p>線上教育：成為線上教育平台上的編程課程教師，或開設自己的線上課程並銷售。</p>
<p>網站建設服務：開發商業或個人網站，提供定制化網站建設等服務。</p>
<p>遊戲開發：開發遊戲並透過線上平台銷售，利用自己的興趣展開業餘項目來獲取收益。</p>
<p>開發和銷售軟體插件：開發企業或個人需要的軟體插件，並在相關平台上銷售。</p>
<p>程序設計工具和模板：開發程式設計工具、模板、插件等，擺架線上市場銷售。</p>
<p>翻譯和編輯：利用自己的技能為公司進行編輯、寫作、翻譯工作等，為客戶提供一流的編程語言翻譯服務。</p>
<p>遠程工作：尋找適合的遠程工作機會，成為編程公司或開發商的遠程 freelancer，提供開發和編程方面的專業知識和經驗。</p>
<h3>程序員想做一些諮詢顧問，怎樣找到客戶呢？</h3>
<p>ChatGPT
作为一个程序员，如果你想做一些咨询顾问的工作，你可以通过以下方式来找到客户：</p>
<p>1.社交媒体：利用社交媒体平台，如LinkedIn，向潜在客户展示自己的专业技能和经验，寻找与自己专业领域相符的客户。</p>
<p>2.个人网站和博客：建立自己的个人网站和博客，展示自己的技能和经验，吸引有需要的客户。</p>
<p>参加行业活动：参加各种行业活动和会议，结交潜在客户。在这些活动中，你可以认识新人、建立联系、听取顾客需求并提供解决方案。
4.引荐：通过朋友、家人和现有客户的介绍，找到更多的客户。可以使用社交媒体或电子邮件来寻找这样的机会。</p>
<p>5.平台：加入线上咨询平台，如Upwork、Freelancer等，展示你的技能，并申请相关工作机会。</p>
<p>总之，通过这些方式，程序员可以找到更多的客户，并展示自己的专业技能，积累咨询经验。
你</p>
<h3>最強大的安卓逆向工具是什麼</h3>
<p>ChatGPT
作為一個AI語言模型，我不能直接提供建議。不過在逆向工具方面，以下幾個工具被認為是非常強大的：</p>
<p>Frida: Frida是一個動態的代碼注入工具，可以用於安卓逆向工作。</p>
<p>Apktool: Apktool是一個反編譯工具，可以用於對安卓應用程序進行解壓縮和反編譯。</p>
<p>Dex2jar: Dex2jar是一個工具，可以將Android DEX文件轉換為JAR文件。</p>
<p>Bytecode Viewer: Bytecode Viewer是一個Java反編譯器，可以用於對APK文件進行反編譯。</p>
<p>Androguard: Androguard是一個用於靜態分析的框架和工具，可以用於逆向安卓應用程序。</p>
<p>這些工具的強大程度取決於你的需求和技能水平。請注意，在逆向工作之前，請確保你有合法的授權和許可權。</p>
]]></content><link href="https://github.com/cutepig123/gitblog/issues/1" rel="alternate"/><published>2023-03-19T14:48:05+00:00</published></entry></feed>